source("~/SE_H8.R", echo=TRUE)
source("~/SE_H8.R", echo=TRUE)
source("~/SE_H8.R", echo=TRUE)
source("~/SE_H8.R", echo=TRUE)
View(t_mat)
View(t_fun)
View(t_fun)
t_mat <- matrix(0, nrow = 3, ncol = 3)
source("~/SE_H8.R", echo=TRUE)
t_mat[1,3]
t_mat[1,3]^(1-sigma)
source("~/SE_H8.R", echo=TRUE)
source("~/SE_H8.R", echo=TRUE)
install.packages("nleqslv")
source("~/SE_H8.R", echo=TRUE)
source("~/SE_H8.R", echo=TRUE)
res$x
p_index <- res$x
p_index <- p_index.^(1/4)
p_index <- p_index^(1/4)
p_index
source("~/SE_H8.R", echo=TRUE)
View(t_mat)
View(x_mat)
source("~/SE_H8.R", echo=TRUE)
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
utility <- function(a){
x <- (sqrt(a^2+4*a)-a)/4*a
u <- x - 0.5*a*x^2
n <-  4/sqrt(1+4/a)
return(n*u)
}
a_vec <- seq(0.01, 1, by=0.01)
library(ggplot2)
utility <- function(a){
x <- (sqrt(a^2+4*a)-a)/4*a
u <- x - 0.5*a*x^2
n <-  4/sqrt(1+4/a)
return(n*u)
}
a_vec <- seq(0.01, 1, by=0.01)
utility_vec - map(a_vec, utility)
library(ggplot2)
utility <- function(a){
x <- (sqrt(a^2+4*a)-a)/4*a
u <- x - 0.5*a*x^2
n <-  4/sqrt(1+4/a)
return(n*u)
}
a_vec <- seq(0.01, 1, by=0.01)
utility_vec <-  map(a_vec, utility)
library(ggplot2)
utility <- function(a){
x <- (sqrt(a^2+4*a)-a)/4*a
u <- x - 0.5*a*x^2
n <-  4/sqrt(1+4/a)
return(n*u)
}
a_vec <- seq(0.01, 1, by=0.01)
library(purrr)
install.packages("purrr")
library(ggplot2)
utility <- function(a){
x <- (sqrt(a^2+4*a)-a)/4*a
u <- x - 0.5*a*x^2
n <-  4/sqrt(1+4/a)
return(n*u)
}
a_vec <- seq(0.01, 1, by=0.01)
library(purrr)
utility_vec <-  map(a_vec, utility)
View(utility)
View(utility_vec)
library(ggplot2)
utility <- function(a){
x <- (sqrt(a^2+4*a)-a)/4*a
u <- x - 0.5*a*x^2
n <-  4/sqrt(1+4/a)
return(n*u)
}
a_vec <- seq(0.01, 1, by=0.01)
library(purrr)
utility_vec <-  map(a_vec, utility)
plot(a_vec, utility_vec)
library(ggplot2)
utility <- function(a){
x <- (sqrt(a^2+4*a)-a)/4*a
u <- x - 0.5*a*x^2
n <-  4/sqrt(1+4/a)
return(n*u)
}
a <- seq(0.01, 1, by=0.01)
library(purrr)
utilities <-  map(a, utility)
plot(a_vec, utilities)
library(ggplot2)
utility <- function(a){
x <- (sqrt(a^2+4*a)-a)/4*a
u <- x - 0.5*a*x^2
n <-  4/sqrt(1+4/a)
return(n*u)
}
a <- seq(0.01, 1, by=0.01)
library(purrr)
utilities <-  map(a, utility)
plot(a , utilities)
library(ggplot2)
utility <- function(a){
x <- (sqrt(a^2+4*a)-a)/4*a
u <- x - 0.5*a*x^2
n <-  4/sqrt(1+4/a)
return(n*u)
}
a <- seq(0.01, 1, by=0.01)
library(purrr)
utilities <-  map(a, utility)
plot(a , utilities, "l")
install.packages("rugarch")  # 如果尚未安装
install.packages('IRkernel')
IRkernel::installspec(user = FALSE)
IRkernel::installspec(user = FALSE)
install.packages('IRkernel')
IRkernel::installspec(user = FALSE)
IRkernel::installspec(user = FALSE)
install.packages('IRkernel')
IRkernel::installspec(user = FALSE)
system("jupyter --version")
install.packages('IRkernel')
IRkernel::installspec(user = TRUE)
Sys.setenv(PATH = paste(Sys.getenv("PATH"), "C:\Users\24410\anaconda3\Scripts\jupyter.exe", sep = ";"))
Sys.setenv(PATH = paste(Sys.getenv("PATH"), "C:/Users/24410/anaconda3/Scripts/jupyter.exe", sep = ";"))
system("jupyter --version")
IRkernel::installspec(user = TRUE)
install.packages("devtools")
devtools::install_github("IRkernel/IRkernel")
install.packages("devtools")
devtools::install_github("IRkernel/IRkernel")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("IRkernel/IRkernel")
IRkernel::installspec()
IRkernel::installspec()
# Prepare sample data: Bitcoin prices
price_data <- read.csv("price_df.csv")
print(fit_model)
# Specify the GARCH model
for (prior_dist in c("norm","std","ged")){
spec <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),  # GARCH(1,1)
mean.model = list(armaOrder = c(1, 0), include.mean = TRUE),    # AR(1) in mean model
distribution.model = prior_dist                                 # distribution
)
fit_model<- ugarchfit(spec = spec, data = log_returns)
print(fit_model)
}
library(rugarch)
setwd("E:/py_projects")
library(rugarch)
price_data <- read.csv("price_df.csv")
log_returns <- diff(log(price_data$close))
# Specify the GARCH model
for (prior_dist in c("norm","std","ged")){
spec <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),  # GARCH(1,1)
mean.model = list(armaOrder = c(1, 0), include.mean = TRUE),    # AR(1) in mean model
distribution.model = prior_dist                                 # distribution
)
fit_model<- ugarchfit(spec = spec, data = log_returns)
print(fit_model)
}
View(price_data)
View(price_data)
rv <- read.csv("daily_realized_volatility.csv")
View(rv)
View(price_data)
View(rv)
View(price_data)
View(price_data)
library(readr)
install.packages("readr")
library(readr)
library(dplyr)
install.packages("dplyr")
install.packages("lubridate")
library(readr)
library(dplyr)
library(lubridate)
df <- read_csv("price_df_5min_.csv")
glimpse(df)
df <- df %>%
mutate(date_time = ymd_hms(date_time))
glimpse(df)
daily_open <- df %>%
filter(hour(date_time) == 0 & minute(date_time) == 0 & second(date_time) == 0) %>%
select(date_time, open)
View(daily_open)
glimpse(df)
View(daily_open)
daily_open <- df %>%
filter(hour(date_time) == 0 & minute(date_time) == 0 & second(date_time) == 0) %>%
select(date_time, open)
library(readr)
library(dplyr)
library(lubridate)
df <- read_csv("price_df_5min_.csv")
glimpse(df)
df <- df %>%
mutate(date_time = ymd_hms(date_time))
daily_open <- df %>%
filter(hour(date_time) == 0 & minute(date_time) == 0 & second(date_time) == 0) %>%
select(date_time, open)
View(df)
View(df)
ymd_hms(df$date_time)
ymd_hms(df$date_time)[1]
hour(ymd_hms(df$date_time)[1])
daily_open <- df %>%
filter(hour(date_time) == 0 & minute(date_time) == 0 & second(date_time) == 0) %>%
select(date_time, open)
View(daily_open)
minute(ymd_hms(df$date_time)[1])
second(ymd_hms(df$date_time)[1])
View(df)
sum(is.na(df$date_time))
View(df)
library(readr)
library(dplyr)
library(lubridate)
df <- read_csv("price_df_5min_.csv")
glimpse(df)
df %>%
filter(format(date_time, "%H:%M:%S") == "00:00:00")
View(df)
library(readr)
library(dplyr)
library(lubridate)
df <- read_csv("price_df_5min_.csv")
glimpse(df)
daily_open <- df %>%
filter(format(date_time, "%H:%M:%S") == "00:00:00") %>%
select(date_time, open)
View(daily_open)
View(daily_open)
View(df)
daily_open$date_time
daily_open$date_time[1]
daily_open$date_time[1]-1
daily_close <- df %>%
mutate(date_time_lagged = lag(date_time, n = 1))
View(daily_close)
daily_close <- daily_open %>%
mutate(date_time_lagged = lag(date_time, n = 1))
View(daily_close)
View(daily_open)
daily_close[1,"date_time_lagged"] <- daily_open$date_time[1]-1
View(daily_close)
ymd(daily_open$date_time[1])
ymd(daily_open$date_time[1])-1
daily_close[1,"date_time_lagged"] <- ymd(daily_open$date_time[1])-1
View(daily_close)
daily_close <- daily_close %>% select(-date_time)
View(daily_open)
View(daily_close)
View(daily_open)
View(daily_close)
daily_close <- daily_close %>% rename(date_time = date_time_lagged, close = open)
View(daily_close)
rv <- read_csv("daily_realized_volatility.csv")
View(rv)
daily_close$log_return <- c(NA, diff(log(daily_close$close)))
View(daily_close)
spec <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),  # GARCH(1,1)
mean.model = list(armaOrder = c(1, 0), include.mean = TRUE),    # AR(1) in mean model
distribution.model = "norm"                                     # distribution
)
fit_model<- ugarchfit(spec = spec, data = daily_close$log_return)
daily_close <- na.omit(daily_close)
View(daily_close)
spec <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),  # GARCH(1,1)
mean.model = list(armaOrder = c(1, 0), include.mean = TRUE),    # AR(1) in mean model
distribution.model = "norm"                                     # distribution
)
fit_model<- ugarchfit(spec = spec, data = daily_close$log_return)
print(fit_model)
View(rv)
View(daily_close)
View(rv)
View(spec)
View(rv)
glimpse(rv)
glimpse(daily_close)
View(daily_close)
rv$date[1]
rv$date[1].type
rv$date[1].types
typeof(rv$date[1])
class(rv$date[1])
class(daily_close$date_time[1])
attributes(rv$date[1])
attributes(daily_close$date_time[1])
daily_close$date <- as.Date(daily_close$date_time, format = "%Y-%m-%d")
View(daily_close)
merged_df <- merge(daily_close, rv, by = "date")
View(merged_df)
View(merged_df)
spec <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),  # GARCH(1,1)
mean.model = list(armaOrder = c(1, 0), include.mean = TRUE),    # AR(1) in mean model
distribution.model = "norm"                                     # distribution
)
fit_model<- ugarchfit(spec = spec, data = merged_df$log_return)
print(fit_model)
View(merged_df)
realGARCH_spec <- ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0), include.mean = TRUE),
distribution.model = "norm",
realizedVol = list("realized_vol")  #introduce realized vol
)
realGARCH_spec <- ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0), include.mean = TRUE),
distribution.model = "norm"
)
fit_realGARCH <- ugarchfit(spec = realGARCH_spec,
data = merged_df$log_return,
realizedVol = merged_df$realized_volatility)
install.packages("xts")
glimpse(merged_df)
library(readr)
library(dplyr)
library(lubridate)
df <- read_csv("price_df_5min_.csv")
glimpse(df)
daily_open <- df %>%
filter(format(date_time, "%H:%M:%S") == "00:00:00") %>%
select(date_time, open)
daily_close <- daily_open %>%
mutate(date_time_lagged = lag(date_time, n = 1))
daily_close[1,"date_time_lagged"] <- ymd(daily_open$date_time[1])-1
daily_close <- daily_close %>% select(-date_time)
daily_close <- daily_close %>% rename(date_time = date_time_lagged, close = open)
daily_close$log_return <- c(NA, diff(log(daily_close$close)))
daily_close <- na.omit(daily_close)
daily_close$date <- as.Date(daily_close$date_time, format = "%Y-%m-%d")
rv <- read_csv("daily_realized_volatility.csv")
merged_df <- merge(daily_close, rv, by = "date")
# simple garch(1,1)
spec <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),  # GARCH(1,1)
mean.model = list(armaOrder = c(1, 0), include.mean = TRUE),    # AR(1) in mean model
distribution.model = "norm"                                     # distribution
)
fit_model<- ugarchfit(spec = spec, data = merged_df$log_return)
print(fit_model)
library(xts)
realGARCH_spec <- ugarchspec(
variance.model = list(model = "realGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0), include.mean = TRUE),
distribution.model = "norm"
)
library(xts)
realized_vol_xts <- xts(merged_df$realized_volatility, order.by = merged_df$date)
log_return_xts <- xts(merged_df$log_return, order.by = merged_df$date)
fit_realGARCH <- ugarchfit(spec = realGARCH_spec,
data = log_return_xts,
realizedVol = realized_vol_xts)
print(fit_model)
print(fit_realGARCH)
print(fit_realGARCH)
print(fit_model)
